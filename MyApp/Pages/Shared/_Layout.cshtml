@inherits Microsoft.AspNetCore.Mvc.Razor.RazorPage<TModel>
@inject AppConfig AppConfig
<!doctype html>
<html lang="en">
<head>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-TZZ1VK3VGL"></script>
    <script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date()); gtag('config', 'G-TZZ1VK3VGL');</script>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/svg" href="img/logo.svg">
    <link rel="alternate" type="application/rss+xml" title="RSS" href="@AppConfig.PublicBaseUrl.CombineWith("feed.xml")" />
    <title>@ViewData["Title"] - ServiceStack</title>
    <base href="@(RazorSsg.GetBaseHref() ?? "/")" />
    <script>
    if (location.search === "?dark") localStorage.setItem('color-scheme','dark') 
    if (location.search === "?light") localStorage.removeItem('color-scheme') 
    const cls = document.querySelector('html').classList
    if (localStorage.getItem('color-scheme') === 'dark')
        cls.add('dark')
    else
        cls.remove('dark')
    </script>
    <link rel="stylesheet" href="css/app.css">

    @Html.ImportMap(new() {
        ["app.mjs"]              = ("./mjs/app.mjs",                     "./mjs/app.mjs"),
        ["dtos.mjs"]             = ("./mjs/dtos.mjs",                    "./mjs/dtos.mjs"),
        ["vue"]                  = ("./lib/mjs/vue.mjs",                 "./lib/mjs/vue.min.mjs"),
        ["@servicestack/client"] = ("./lib/mjs/servicestack-client.mjs", "./lib/mjs/servicestack-client.min.mjs"),
        ["@servicestack/vue"]    = ("./lib/mjs/servicestack-vue.mjs",    "./lib/mjs/servicestack-vue.min.mjs"),
        ["highlight.mjs"]        = ("./lib/mjs/highlight.mjs",           "./lib/mjs/highlight.mjs"),
        ["core"]                 = ("./js/core.mjs",                     "./js/core.mjs"),
    })
    @await RenderSectionAsync("head", required: false)
</head>
<body class="bg-white dark:bg-black dark:text-white">
@await Html.PartialAsync("Header")

<div class="min-h-screen">
    <main role="main" class="pt-14">
        @RenderBody()
    </main>
</div>

@{
    if (ViewData["HideFooter"] == null)
    {
        @await Html.PartialAsync("Footer")
    }
}

<script type="module">
import { init } from "app.mjs"
init()
</script>

@await RenderSectionAsync("Scripts", required: false)

</body>
</html>