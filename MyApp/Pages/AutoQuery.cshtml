@page "/autoquery"
@attribute [RenderStatic]

@{
    ViewData["Title"] = "AutoQuery";
    ViewData["Brand"] = "ServiceStack AutoQuery";
}

<div class="bg-white">
  

  <div class="relative isolate px-6 pt-14 lg:px-8">
    <div class="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80">
      <svg class="relative left-[calc(50%-11rem)] -z-10 h-[21.1875rem] max-w-none -translate-x-1/2 rotate-[30deg] sm:left-[calc(50%-30rem)] sm:h-[42.375rem]" viewBox="0 0 1155 678">
        <path fill="url(#45de2b6b-92d5-4d68-a6a0-9b9b2abad533)" fill-opacity=".3" d="M317.219 518.975L203.852 678 0 438.341l317.219 80.634 204.172-286.402c1.307 132.337 45.083 346.658 209.733 145.248C936.936 126.058 882.053-94.234 1031.02 41.331c119.18 108.451 130.68 295.337 121.53 375.223L855 299l21.173 362.054-558.954-142.079z" />
        <defs>
          <linearGradient id="45de2b6b-92d5-4d68-a6a0-9b9b2abad533" x1="1155.49" x2="-78.208" y1=".177" y2="474.645" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9089FC" />
            <stop offset="1" stop-color="#FF80B5" />
          </linearGradient>
        </defs>
      </svg>
    </div>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-32 sm:py-48 text-center">

        <h1 class="mx-auto max-w-4xl font-display text-5xl font-medium tracking-tight text-slate-900 dark:text-slate-50 sm:text-6xl">
            <div class="pb-4">
                AutoQuery
                <span class="relative whitespace-nowrap text-blue-600">
                    <svg aria-hidden="true" viewBox="0 0 418 42" class="absolute top-2/3 left-0 h-[0.58em] w-full fill-blue-300/70" preserveAspectRatio="none"
                    ><path d="M203.371.916c-26.013-2.078-76.686 1.963-124.73 9.946L67.3 12.749C35.421 18.062 18.2 21.766 6.004 25.934 1.244 27.561.828 27.778.874 28.61c.07 1.214.828 1.121 9.595-1.176 9.072-2.377 17.15-3.92 39.246-7.496C123.565 7.986 157.869 4.492 195.942 5.046c7.461.108 19.25 1.696 19.17 2.582-.107 1.183-7.874 4.31-25.75 10.366-21.992 7.45-35.43 12.534-36.701 13.884-2.173 2.308-.202 4.407 4.442 4.734 2.654.187 3.263.157 15.593-.78 35.401-2.686 57.944-3.488 88.365-3.143 46.327.526 75.721 2.23 130.788 7.584 19.787 1.924 20.814 1.98 24.557 1.332l.066-.011c1.201-.203 1.53-1.825.399-2.335-2.911-1.31-4.893-1.604-22.048-3.261-57.509-5.556-87.871-7.36-132.059-7.842-23.239-.254-33.617-.116-50.627.674-11.629.54-42.371 2.494-46.696 2.967-2.359.259 8.133-3.625 26.504-9.81 23.239-7.825 27.934-10.149 28.304-14.005.417-4.348-3.529-6-16.878-7.066Z"></path></svg>
                    <span class="relative">made simple</span>
                </span>
            </div>
            <div>Instant Query & CRUD APIs</div>
        </h1>
        <p class="mx-auto mt-6 max-w-4xl text-xl tracking-tight text-slate-700 dark:text-slate-200">
            High performance, Industrial strength, effortless, code-first APIs
        </p>
        <div class="mt-36 lg:mt-24">
            <p class="font-display text-base text-slate-900 dark:text-slate-50">
                Rapidly develop high-performance Queryable &amp; CRUD APIs for
            </p>
            <ul class="mt-8 flex items-center gap-x-12 gap-y-0 justify-center">
                <li title="PostgreSQL">
                    <img src="/img/svgs/postgresql-notext.svg" class="h-16">
                </li>
                <li title="Microsoft SQL Server">
                    <img src="/img/svgs/sqlserver.svg" class="h-16">
                </li>
                <li title="SQLite">
                    <img src="/img/svgs/sqlite.svg" class="h-16">
                </li>
                <li title="MySQL">
                    <img src="/img/svgs/mysql.svg" class="h-16">
                </li>
                <li title="MariaDB">
                    <img src="/img/svgs/mariadb.svg" class="h-16">
                </li>
            </ul>
        </div>        
        
    </div>
    <div class="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]">
      <svg class="relative left-[calc(50%+3rem)] h-[21.1875rem] max-w-none -translate-x-1/2 sm:left-[calc(50%+36rem)] sm:h-[42.375rem]" viewBox="0 0 1155 678">
        <path fill="url(#ecb5b0c9-546c-4772-8c71-4d3f06d544bc)" fill-opacity=".3" d="M317.219 518.975L203.852 678 0 438.341l317.219 80.634 204.172-286.402c1.307 132.337 45.083 346.658 209.733 145.248C936.936 126.058 882.053-94.234 1031.02 41.331c119.18 108.451 130.68 295.337 121.53 375.223L855 299l21.173 362.054-558.954-142.079z" />
        <defs>
          <linearGradient id="ecb5b0c9-546c-4772-8c71-4d3f06d544bc" x1="1155.49" x2="-78.208" y1=".177" y2="474.645" gradientUnits="userSpaceOnUse">
            <stop stop-color="#9089FC" />
            <stop offset="1" stop-color="#FF80B5" />
          </linearGradient>
        </defs>
      </svg>
    </div>
  </div>
</div>


<section>
    <div class="pt-8 mt-8 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 pt-20 pb-16 text-center lg:pt-20">

    </div>
</section>

@await Html.PartialAsync("PrimaryNav", "/autoquery")

<section>
    <div class="mx-auto max-w-5xl py-24 sm:py-32">

        <h3 class="mt-8 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl">Fast, typed, code-first Queryable APIs</h3>

        <div class="w-full px-4">
            <p class="mx-auto mt-5 text-xl text-gray-500">
                ServiceStack's AutoQuery is a fresh, approach to enable Auto Querying functionality akin to OData's querying support for Web Api,
                but without its <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/why-not-odata">webservice anti-patterns</a>
                where instead of adopting an opaque implementation encumbered syntax, it adheres to HTTP API's simple flat structure by instead
                enhancing the ideal API the developer would naturally write and completes their implementation for them!
            </p>

            <p class="mx-auto mt-5 text-xl text-gray-500">
                This is the design philosophy behind AutoQuery which utilizes conventions to automate creation of intent-based self-descriptive APIs
                that are able to specify configurable conventions and leverage extensibility options to maximize the utility of AutoQuery services.
            </p>

        </div>

        <h3 class="mt-8 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-gray-50 dark:text-gray-50 sm:text-4xl">Great alternative to OData, GraphQL or JSON:API</h3>

        <div class="flex flex-wrap">
            <div class="w-full sm:w-1/2 px-4">
                <h3 class="mt-8 text-xl font-medium tracking-tight text-gray-900 dark:text-gray-50">Connect to anything with data</h3>
                <p class="mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    Expose data from various data sources including 
                    <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/autoquery-rdbms">RDBMS</a>, 
                    <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/autoquery-memory">In Memory</a>, 
                    <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/autoquery-dynamodb">DynamoDb</a>
                    or even 
                    <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/autoquery-service">other services </a>
                    through consistent flexible APIs where clients can control the query details.
                </p>
                <h3 class="mt-8 text-xl font-medium tracking-tight text-gray-900 dark:text-gray-50">Works with your favorite databases</h3>
                <p class="mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/autoquery-rdbms">AutoQuery RDBMS</a>
                    works with anything OrmLite can connect to, including:
                </p>
                <ul class="ul-circle mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    <li class="mt-2">PostgreSQL</li>
                    <li class="mt-2">SQL Server</li>
                    <li class="mt-2">SQLite</li>
                    <li class="mt-2">MySQL</li>
                    <li class="mt-2">MariaDB</li>
                    <li class="mt-2">AWS Aurora</li>
                </ul>
            </div>
            <div class="w-full sm:w-1/2 px-4">
                <h3 class="mt-8 text-xl font-medium tracking-tight text-gray-900 dark:text-gray-50">Clean REST routes, accessible from everywhere</h3>
                <p class="mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    Unlike OData and GraphQL, AutoQuery provides clean REST services making them easy to use from standard browsers, avoiding the requirement for complex clients.
                </p>
                <h3 class="mt-8 text-xl font-medium tracking-tight text-gray-900 dark:text-gray-50">Unmatched client integration experience</h3>
                <p class="mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    Add ServiceStack Reference provides best in class client generation in a multitude of languages straight from the server you're integrating with.
                </p>
                <p class="mx-auto mt-5 max-w-prose text-xl text-gray-500">
                    Instant Client Apps can generate working native client solutions through an easy to use free web tool, only needing a base URL of a ServiceStack service.
                </p>
            </div>
        </div>

    </div>
</section>

@await Html.PartialAsync("VideoIncludes")
@await Html.PartialAsync("HighlightIncludes")

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "AutoQuery",
  Summary = "AutoQuery utilizes conventions to automate the creation of highly productive, intent-based self-descriptive APIs",
  Group = "autoquery",
  Background = "bg-slate-100 dark:bg-slate-800",
})

<section>
    <div class="bg-white py-32 px-6 lg:px-8">
      <div class="mx-auto max-w-4xl text-base leading-7 text-gray-700">
            <p class="text-base font-semibold leading-7 text-indigo-600">Getting Started</p>
            <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Create APIs with minimal code-first DTOs</h1>
          <p class="mt-6 text-xl leading-8">
              AutoQuery can be enabled in any ServiceStack project with a few easy steps: 
          </p>
          <div class="mt-10 max-w-2xl">
              <h2 class="text-2xl font-bold tracking-tight text-gray-900">1. Configure your preferred database</h2>
              <p class="my-4">
                  Configure your .NET App with the 
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/ormlite/installation">OrmLite NuGet package</a> 
                  of the RDBMS you want to use. SQLite is a great option to evaluate AutoQuery without any external dependencies:
              </p>
              
              <div data-component="CopyLine" data-props="{ text:'<PackageReference Include=&quot;ServiceStack.OrmLite.Sqlite.Data&quot; Version=&quot;6.*&quot; />' }"></div>

              <p class="my-4">
                  Configure your App to use your database. We recommend using a
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/modular-startup">Modular Startup</a>
                  configuration for the greater encapsulation and flexibility.
              </p>
              <p class="my-4">
                  In this example we'll create a simple <b>Todo</b> table:
              </p>
              
              
              <pre><code class="language-csharp">// Configure.Db.cs
using ServiceStack.Data;
using ServiceStack.OrmLite;
using ServiceStack.DataAnnotations;

[assembly: HostingStartup(typeof(MyApp.ConfigureDb))]

namespace MyApp;

public class Todo
{
    [AutoIncrement]
    public long Id { get; set; }
    public string Text { get; set; }
    public bool IsFinished { get; set; }
}

public class ConfigureDb : IHostingStartup
{
    public void Configure(IWebHostBuilder builder) => builder
      .ConfigureServices(services => 
          services.AddSingleton&lt;IDbConnectionFactory&gt;(
            new OrmLiteConnectionFactory("db.sqlite", SqliteDialect.Provider)));

        .ConfigureAppHost(appHost => {
            // Create and populate Todo Table if it doesn't exist:
            using var db = appHost.Resolve&lt;IDbConnectionFactory&gt;().Open();
            if (db.CreateTableIfNotExists&lt;Todo&gt;()) 
            {
                db.Insert(new Todo { Text = "Learn" });
                db.Insert(new Todo { Text = "AutoQuery" });
            }
        });
}
</code></pre>

              <h2 class="text-2xl font-bold tracking-tight text-gray-900">2. Configure AutoQuery</h2>
              <p class="my-4">
                  AutoQuery can then be enabled by registering the <b>AutoQueryFeature</b> plugin:
              </p>
              
              <pre><code class="language-csharp">// Configure.AutoQuery.cs              
using ServiceStack;

[assembly: HostingStartup(typeof(MyApp.ConfigureAutoQuery))]

namespace MyApp;

public class ConfigureAutoQuery : IHostingStartup
{
    public void Configure(IWebHostBuilder builder) => builder
        .ConfigureAppHost(appHost => {
            appHost.Plugins.Add(new AutoQueryFeature {
                MaxLimit = 1000,
                //IncludeTotal = true,
            });
        });
}              
</code></pre>
              
              <h2 class="text-2xl font-bold tracking-tight text-gray-900">3. Create AutoQuery APIs</h2>
              <p class="my-4">
                  With AutoQuery configured, we can now start creating AutoQuery APIs, a minimal working example
                  is an empty Request DTO which we'll make available via the <b>/todos</b> route:
              </p>

              <pre><code class="language-csharp">// ServiceModel/Todos.cs
using ServiceStack;

namespace MyApp.ServiceModel;

[Route("/todos")]
public class QueryTodos : QueryDb&lt;Todo&gt; {}              
</code></pre>
              
              <h2 class="text-2xl font-bold tracking-tight text-gray-900">4. Query your API</h2>
              <p class="my-4">
                  That's all that's needed! From your contract-first API blueprint ServiceStack implements a fully queryable, 
                  type safe API for the <b>Todo</b> table that you can immediately viewing the API from the <b>/todos</b>
                  route in a browser where you can immediately benefit from the 
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/auto-html-api">Auto HTML API</a> page:
              </p>
              
          </div>
          
          <figure class="mt-4">
              <a href="https://docs.servicestack.net/auto-html-api"><img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/autoquery/todos-autohtml-preview.png" alt=""></a>
          </figure>

          <div class="max-w-2xl">
              <p class="my-4">
                  With links to view the API response in available formats and the API details 
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/api-explorer">API Explorer</a>:
              </p>
          </div>
          
          <figure class="mt-4">
              <a href="https://docs.servicestack.net/api-explorer"><img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/autoquery/todos-ui-details.png" alt=""></a>
          </figure>

          <div class="max-w-2xl">
              <p class="my-4">
                  Or immediately query the API in a readonly 
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/vue/gallery/autoquerygrid">AutoQueryGrid</a>
                  in 
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/locode/">Locode</a>:
              </p>
          </div>
          
          <figure class="mt-4">
              <a href="https://docs.servicestack.net/locode/"><img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/autoquery/todos-locode.png" alt=""></a>
          </figure>

          <div class="mt-12 max-w-2xl">
              <h2 class="my-4 text-2xl font-bold tracking-tight text-gray-900">Next Steps</h2>
              <p class="my-4">
                  Hopefully this simple example shows how easy it is to get up &amp; running and become
                  immediately productive with AutoQuery. For larger projects we recommend adopting the
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/create-your-first-webservice#step-4-exploring-the-servicestack-solution">physical project structure</a>
                  and creating RDBMS tables with OrmLite's
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/ormlite/db-migrations">Code-First DB Migrations</a>.
              </p>
              
              <p class="my-4">
                  The easiest way of which is to start from a 
                  <a class="text-indigo-600 hover:text-indigo-800" href="/start">new project template</a>
                  with all this configured, like the  
                  <a class="text-indigo-600 hover:text-indigo-800" href="https://vue-mjs.web-templates.io">vue-mjs.web-templates.io</a>
                  Razor Pages template:
              </p>
              
              <div class="flex">
                  <a class="archive-url" href="@Html.ApiUrl("/archive/NetCoreTemplates/vue-mjs")">
                      <div class="bg-white px-4 py-4 mr-4 mb-4 rounded-lg shadow-lg text-center items-center justify-center hover:shadow-2xl" style="min-width:180px">
                          <div class="text-center font-extrabold flex items-center justify-center bg-white mb-2">
                              <div class="text-4xl text-blue-400 my-3">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 32 32"><path fill="#60a5fa" d="M23.844 27.692a16.332 16.332 0 0 1-6.645 1.3q-6.364 0-10.013-3.243a11.3 11.3 0 0 1-3.649-8.9a13.716 13.716 0 0 1 3.785-9.898A12.716 12.716 0 0 1 16.9 3.008a11.676 11.676 0 0 1 8.425 3.006a9.994 9.994 0 0 1 3.142 7.533a10.187 10.187 0 0 1-2.318 7.114a7.532 7.532 0 0 1-5.817 2.547a2.613 2.613 0 0 1-1.845-.642a2.323 2.323 0 0 1-.764-1.6a4.9 4.9 0 0 1-4.148 2.243a4.6 4.6 0 0 1-3.507-1.479a5.706 5.706 0 0 1-1.384-4.063a9.913 9.913 0 0 1 2.2-6.357q2.2-2.763 4.8-2.763a5.063 5.063 0 0 1 4.256 1.716l.311-1.338h2.405l-2.081 9.08a10.716 10.716 0 0 0-.352 2.243q0 .972.744.972a4.819 4.819 0 0 0 3.877-2.047a8.93 8.93 0 0 0 1.621-5.681a7.98 7.98 0 0 0-2.675-6.175a9.887 9.887 0 0 0-6.919-2.432a10.6 10.6 0 0 0-8.158 3.467a12.066 12.066 0 0 0-3.2 8.495a9.561 9.561 0 0 0 3.06 7.573q3.06 2.7 8.586 2.7a13.757 13.757 0 0 0 5.675-1.054ZM19.466 12.25a3.977 3.977 0 0 0-3.6-1.716q-1.824 0-3.263 2.23a8.726 8.726 0 0 0-1.439 4.824q0 3.635 2.905 3.635a3.771 3.771 0 0 0 2.651-1.183a6.309 6.309 0 0 0 1.7-3.2Z"></path></svg>
                              </div>
                          </div>
                          <div class="mb-3 text-xl font-medium text-gray-700">vue-mjs</div>
                          <div class="flex justify-center h-8">
                              <div class="mr-1"><span class="px-2 h-8 rounded-lg bg-blue-50 text-blue-500 text-sm">autoquery</span></div>
                          </div>
                          <span class="archive-name px-4 pb-2 text-blue-600">MyApp.zip</span>
                      </div>
                  </a>
              </div>
          </div>

      </div>
    </div>    
</section>

<script>hljs.highlightAll();</script>
