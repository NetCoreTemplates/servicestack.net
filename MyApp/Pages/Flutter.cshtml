@page "/flutter"
@attribute [RenderStatic]

@{
    ViewData["Title"] = "Flutter";
    ViewData["Brand"] = "ServiceStack Flutter";
}

@await Html.PartialAsync("VideoIncludes")
@await Html.PartialAsync("HighlightIncludes")

<section class="relative isolate overflow-hidden bg-slate-900" style="background-image:radial-gradient(ellipse at bottom,#1a68d3 5%,transparent 60%),linear-gradient(136deg,transparent,#71c7ee 290%),linear-gradient(115deg,#9d9af1,transparent 40%),linear-gradient(180deg,transparent 0,#1a68d3 70%),radial-gradient(ellipse at -70% -180%,transparent 80%,#71c7ee 0),radial-gradient(ellipse at bottom,#1a68d3 40%,transparent 80%),radial-gradient(ellipse at 5% 340%,transparent 80%,#bfc2f4 0)">
    <svg viewBox="0 0 1108 632" aria-hidden="true" class="absolute top-10 left-[calc(50%-4rem)] -z-10 w-[69.25rem] max-w-none transform-gpu blur-3xl sm:left-[calc(50%-18rem)] lg:left-48 lg:top-[calc(50%-30rem)] xl:left-[calc(50%-24rem)]">
        <path fill="url(#175c433f-44f6-4d59-93f0-c5c51ad5566d)" fill-opacity=".2" d="M235.233 402.609 57.541 321.573.83 631.05l234.404-228.441 320.018 145.945c-65.036-115.261-134.286-322.756 109.01-230.655C968.382 433.026 1031 651.247 1092.23 459.36c48.98-153.51-34.51-321.107-82.37-385.717L810.952 324.222 648.261.088 235.233 402.609Z"/>
        <defs>
            <linearGradient id="175c433f-44f6-4d59-93f0-c5c51ad5566d" x1="1220.59" x2="-85.053" y1="432.766" y2="638.714" gradientUnits="userSpaceOnUse">
                <stop stop-color="#4F46E5"/>
                <stop offset="1" stop-color="#80CAFF"/>
            </linearGradient>
        </defs>
    </svg>
    <div class="mx-auto max-w-7xl px-6 pt-16 pb-16 lg:flex lg:px-8">
        <div class="mx-auto max-w-2xl flex-shrink-0 lg:mx-0 lg:max-w-xl lg:pt-8">
            <h1 class="mt-4 text-4xl tracking-tight font-extrabold text-white sm:mt-5 sm:text-6xl lg:mt-6 xl:text-6xl">
                <span class="block">Flutter</span>
            </h1>
            <p class="mt-3 text-base text-gray-100 sm:mt-5 sm:text-xl lg:text-lg xl:text-xl">
                Experience the amazing productivity &amp; type safety from effortlessly calling .NET APIs from Flutter and Dart Apps
            </p>
            <div class="mt-10 align-top" style="width:560px;height:315px">
                <lite-youtube width="560" height="315" videoid="t4WcXo4Vnio"
                              style="background-image: url('https://img.youtube.com/vi/t4WcXo4Vnio/maxresdefault.jpg')">
                </lite-youtube>
            </div>
            <div class="mt-10 flex items-center gap-x-6">
                <a href="https://docs.servicestack.net/flutter" class="rounded-md bg-white/10 py-2.5 px-3.5 font-semibold text-white shadow-sm hover:bg-white/20">Learn more</a>
            </div>
        </div>
        <div class="mx-auto mt-16 flex max-w-2xl lg:ml-10 lg:mt-0 lg:mr-0 lg:max-w-none lg:flex-none xl:ml-32">
            <div class="max-w-3xl flex-none sm:max-w-5xl lg:max-w-none">
                <a href="https://docs.servicestack.net/locode/">
                    <!-- CCA4 https://flutter.dev -->
                    <img src="/img/pages/flutter/flutter-mobile.png" alt="App screenshot" width="1316" height="1072" class="w-[50rem] rounded-md py-8 bg-white/5 shadow-2xl ring-1 ring-white/10">
                </a>
            </div>
        </div>
    </div>
</section>

@await Html.PartialAsync("PrimaryNav", "/flutter")

<a id="videos"></a>
@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup
{
   Title = "Flutter iOS and Android Apps",
   Summary = "Rapidly develop beautiful native cross-platform iOS and Android Apps with Flutter's beautiful widgets calling ServiceStack's HTTP and gRPC end-to-end typed .NET API integrations",
   Group = "flutter",
   LearnMore = "https://docs.servicestack.net/flutter",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup
{
   Title = "Dart and Flutter gRPC",
   Summary = "ServiceStack gRPC is an alternative approach for enabling high-performance end-to-end typed APIs using gRPC generated clients that benefits from ServiceStack's simplified gRPC tooling and reuse of existing HTTP APIs",
   Group = "flutter-grpc",
   LearnMore = "https://docs.servicestack.net/grpc",
   Background = "bg-slate-100 dark:bg-slate-800",
})

<section id="getting-started">
    <div class="bg-white dark:bg-black py-32 px-6 lg:px-8">
    <div class="mx-auto max-w-4xl text-base leading-7 text-gray-700">
    <a href="#getting-started" class="block text-base font-semibold leading-7 text-indigo-600">Getting Started</a>
    <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
        Create a Flutter App with a .NET API backend
    </h1>
    <p class="mt-6 text-xl leading-8">
        In this example we'll walk through creating a new Flutter Mobile App with a 
        .NET API backend and demonstrate the development workflow of calling new .NET APIs
        with typed client APIs from Flutter
    </p>
    <div class="mt-10 max-w-2xl">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">Pre-requisites</h2>
        <p class="my-4">
            Ensure you have the <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.flutter.dev/get-started/install/windows">Flutter SDK</a>
            and the <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/dotnet-tool">x dotnet tool</a> installed:
        </p>
        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'dotnet tool install --global x' }"></div>

        <p class="my-4">
            Both Flutter and .NET have great CLI tooling where you can get a great development experience using a 
            text editor like 
            <a class="text-indigo-600 hover:text-indigo-800" href="https://code.visualstudio.com/">VS Code</a>
            with its great multi-terminal support, or if preferred, full-featured IDEs like 
            <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.flutter.dev/get-started/install/windows#android-setup">Android Studio</a>
            and
            <a class="text-indigo-600 hover:text-indigo-800" href="https://www.jetbrains.com/rider/">JetBrains Rider</a>
            for even richer tooling.
        </p>
    </div>
        
    <div class="mt-10 max-w-2xl">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">1. Create your .NET Project</h2>

        <p class="my-4">
            Start with your <a class="text-indigo-600 hover:text-indigo-800" href="start">preferred project</a>, 
            or create an empty Project with your preferred project name:
        </p>
            
        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'x new web MyApp' }"></div>

        <p class="my-4">
            That can be run immediately in the <b>Host</b> project with dotnet watch for a live reload dev UX:
        </p>
            
        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'dotnet watch' }"></div>
            
    </div>
        
    <div class="mt-10 max-w-2xl">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">2. Add a new Flutter App to your project</h2>
        <p class="my-4">
            Then from a new Terminal in your Solution folder (e.g. <b>MyApp</b>), add a new Flutter App with: 
        </p>
            
        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'x mix flutter' }"></div>

        <p class="my-4">
            This will run <b>flutter create</b> to add a new Flutter App to your solution that should look like: 
        </p>

        <figure class="mt-4">
            <a href="https://docs.servicestack.net/flutter"><img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/flutter/flutter-mix-project-structure.png" alt=""></a>
        </figure>
            
        <p class="my-4">
            It also adds the <b>servicestack</b> client library package that's pre-configured to 
            call the default <b>Hello</b> API in new ServiceStack projects which we can test
            by running fluter from <b>myapp_flutter</b>:
        </p>

        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'flutter run' }"></div>

        <p class="my-4">
            We recommend choosing <b>[1]</b> to run the Flutter App as a Windows Desktop App for the best dev UX on Windows,
            which after a few moments should open the Hello App in a Desktop App:
        </p>
            
        <figure class="mt-4">
            <a href="https://docs.flutter.dev/get-started/codelab">
                <img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/flutter/flutter-hello.png" alt=""></a>
        </figure>
    </div>
        
    <div class="mt-10 max-w-2xl">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">3. Create your .NET API</h2>
        <p class="my-4">
            Lets create a new API to preview the typical dev workflow of calling new .NET APIs from Flutter.
            First we'll want to define our API's Service Contract with the Request and Response DTOs the API
            will accept and return in:
        </p>

        <b>MyApp.ServiceModel/SearchFiles.cs</b>
            
        <pre><code class="language-csharp">using ServiceStack;
using System.Collections.Generic;

namespace MyApp.ServiceModel;

public class SearchFiles : IReturn&lt;SearchFilesResponse&gt;
{
   public string Pattern { get; set; }
}

public class SearchFilesResponse
{
   public List&lt;string&gt; Results { get; set; }
}
</code></pre>

        <p class="my-4">
            Then add its Implementation that scans the .NET App's folder for files and returns the results: 
        </p>

        <b>MyApp.ServiceInterface/SearchFilesService.cs</b>
            
        <pre><code class="language-csharp">using ServiceStack;
using MyApp.ServiceModel;

namespace MyApp.ServiceInterface;

public class SearchFilesServices : Service
{
   public object Any(SearchFiles request)
   {
       var files = VirtualFiles.GetAllMatchingFiles(request.Pattern ?? "*");
       return new SearchFilesResponse {
           Results = files.Map(x => x.VirtualPath)
       };
   }
}
</code></pre>
            
        <p class="my-4">
            <b>dotnet watch</b> should automatically detect the changes and reload the App to take effect.
        </p>
    </div>
        
    <div class="mt-10 max-w-2xl">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">3. Update Flutter App</h2>
        <p class="my-4">
            Then to update our clients Dart DTOs we just need to run <b>x dart</b> from the Flutter project:
        </p>

        <div data-component="CopyLine" data-props="{ prefix:'$ ', text:'x dart' }"></div>

        <p class="my-4">
            Which can now be used in our App, by replacing the <b>callService()</b> and <b>build()</b> methods with:
        </p>

        <pre><code class="language-dart">void callService() async {
 var response = await client.get(SearchFiles(pattern: myController.text));
 setState(() {
   result = response.results!.join('\n');
 });
}

@@override
Widget build(BuildContext context) {
 return Scaffold(
   appBar: AppBar(title: Text(widget.title),),
   body: Center(
     child: Column(
       mainAxisAlignment: MainAxisAlignment.center,
       children: &lt;Widget&gt;[
         Container(
           padding: const EdgeInsets.only(top: 20),
           margin: const EdgeInsets.only(left: 100.0, right: 100.0),
           child: Column(
             children: [
               const Text(
                 'Search Files',
                 style:
                     TextStyle(fontWeight: FontWeight.bold, fontSize: 24.0),
               ),
               TextField(
                 decoration: const InputDecoration(
                   border: OutlineInputBorder(),
                   hintText: '*',
                 ),
                 controller: myController,
               )
             ],
           ),
         ),
         Padding(
           padding: const EdgeInsets.all(8.0),
           child: Text(
             result,
             style: const TextStyle(fontSize: 18),
           ),
         ),
       ],
     ),
   ),
 );
}
</code></pre>

        <p class="my-4">
            Which after a restart should now call our new <b>SearchFiles</b> API returning .NET App files that
            match the specified pattern:
        </p>

        <figure class="mt-4">
            <a href="https://docs.servicestack.net/flutter">
                <img class="bg-gray-50 rounded shadow hover:shadow-lg" src="/img/pages/flutter/flutter-search-files.png" alt=""></a>
        </figure>
    </div>
        
    <div class="mt-10 max-w-2xl">
        <p class="my-4">
            We hope this was a good waltkthrough to showcase the simplified end-to-end typed dev model for working
            with ServiceStack's APIs, be sure to check out the 
            <a class="text-indigo-600 hover:text-indigo-800" href="#videos">Flutter videos</a> for more in-depth
            explanations or head over to our 
            <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/#community-support">Support Channels</a>
            if you have any issues or questions.
        </p>
    </div>
    </div>
    </div>
</section>

@await Html.PartialAsync("PricingLinks")

@await Html.PartialAsync("Testimonials")

@await Html.PartialAsync("BrandCustomers")

<script>hljs.highlightAll();</script>