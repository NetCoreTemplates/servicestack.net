@page "/overview/clients"
@attribute [RenderStatic]

@{
    ViewData["Title"] = "Fundamentals - Clients";
}

@await Html.PartialAsync("DocsHeader", new Shared.DocsHeader {
   Heading = "Getting Started - Clients",
   SubHeading = "Different ways for getting started with ServiceStack: Project templates, Walkthroughs, Docs and Videos, choose what's best for you",
})


<div class="relative isolate overflow-hidden bg-white px-6 py-12 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">ServiceStack Clients</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    As ServiceStack is just a pure HTTP web service it can be accessed with any HTTP-capable client. ServiceStack libraries provide out of the box client libraries for all of most popular platforms and exposes a consistent and intuitive client API that takes advantage of the message centric design of ServiceStack services.
                </p>
                <p class="text-left clearfix">
                    This supports developers to wrap their own web service APIs in their custom client SDK with minimal effort since underlying ServiceStack libraries can be used as a base.
                </p>
                <p class="text-left clearfix">
                    This is an especially good idea if you want to support static languages (i.e. C# and Java) where having typed client libraries saves end-users from reverse engineering the types and API calls. It also saves them having to look up documentation since a lot of it can be inferred from the type info.
                </p>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://docs.servicestack.net/clients-overview#net-clients"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">
            <img src="/img/start/servicestack-httpclients.png" alt="ServiceStack Clients">
        </div>
    </div>
</div>


<div class="relative isolate overflow-hidden bg-white px-6 py-12 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Service Clients</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    Using DTOs to define your web service interface makes it possible to provide strong-typed generic service clients without any code-gen or extra build-steps, leading to a productive end-to-end type-safe communication gateway from client to server.
                </p>
                <p class="text-left clearfix">
                    This experience is consistent across ServiceStack client libraries and DTOs can be easily shared through tooling like <strong>Add ServiceStack Reference</strong>. These clients are  optimized for consuming ServiceStack Services including built-in <a href="https://docs.servicestack.net/error-handling">Error handling</a>, <a href="https://docs.servicestack.net/routing">Predefined Routes</a>, <a href="https://docs.servicestack.net/auto-batched-requests">Auto Batched Requests</a>, etc.
                </p>
                <ul>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/csharp-client">C#/.NET Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/typescript-add-servicestack-reference">TypeScript Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/python-add-servicestack-reference">Python Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/kotlin-add-servicestack-reference">Kotlin Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/java-add-servicestack-reference">Java Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/swift-add-servicestack-reference">Swift Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/dart-add-servicestack-reference#example-usage">Dart Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/javascript-client">JavaScript Client</a></li>
                    <li class="list-inside list-disc"><a href="https://docs.servicestack.net/redis-mq">MQ Clients</a></li>
                </ul>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://docs.servicestack.net/clients-overview#servicestack-clients"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">

<b>C#</b>
<pre><code class="language-csharp">var baseUrl = "https://web.web-templates.io";
var client = new JsonServiceClient(baseUrl);
var response = client.Get(new Hello { Name = "World!" });
</code></pre>

<b>Dart</b>
<pre><code class="language-dart">import 'package:servicestack/client.dart';
import 'dtos.dart';

var baseUrl = "https://web.web-templates.io";
var client = new JsonServiceClient(baseUrl);
var response = await client.get(new Hello(name:"World!"));
</code></pre>

<b>Java</b>
<pre><code class="language-java">String baseUrl = "https://web.web-templates.io";
JsonServiceClient client = new JsonServiceClient(baseUrl);
HelloResponse = client.get(new Hello().setName("World!"));
</code></pre>

<b>Swift</b>
<pre><code class="language-swift">var baseUrl = "https://web.web-templates.io";
var client = JsonServiceClient(baseUrl:baseUrl)

var request = Hello()
request.name = "World!"
let response = client.get(request);
</code></pre>

<b>TypeScript</b>
<pre><code class="language-typescript">import { JsonServiceClient } from 'servicestack-client'
import { Hello } from './web.dtos'

let baseUrl = "https://web.web-templates.io"
let client = new JsonServiceClient(baseUrl)

let request = new Hello({ name: 'World!' })
let response = await client.get(request) //res:HelloResponse
</code></pre>
            
        </div>
    </div>
</div>


<div class="relative isolate overflow-hidden bg-white px-6 py-12 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Web Client</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    TypeScript provides a great developer experience for web developers, the additional type information and safety also makes ServiceStack's typed end to end services a pleasure to use.
                    The NPM library <code>@@servicestack/client</code> combined with your service DTOs which are generated by ServiceStack takes the guess work out of what data structures will be returning from each service.
                </p>
                <p class="text-left clearfix">
                    Here, in a VueJS project, we can see the server DTOs in C# as well as what the TypeScript DTOs that the server generates from them. The Service Client can infer the response type from the request type thanks to the use of IReturn&lt;T&gt;.
                </p>
                <p class="text-left clearfix">
                    This provides web development with autocomplete of the available requests as well as typed objects in the response so you know exactly what data is available and it is typed without any additional effort.
                </p>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://docs.servicestack.net/typescript-add-servicestack-reference#first-class-development-experience"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">

<pre><code class="language-csharp">[Route("/hello")]
[Route("/hello/{Name}")]
public class Hello : IReturn&lt;HelloResponse&gt;
{
   public string Name { get; set; }
}

public class HelloResponse
{
   public string Result { get; set; }
}

public class MyServices : Service
{
   public object Any(Hello request) =&gt;
       new HelloResponse {
           Result = $"Hello, {request.Name}!"
       };
}
</code></pre>

<b>HelloApi.mjs</b>
<pre><code class="language-typescript">import { ref } from "vue"
import { useClient } from "@@servicestack/vue"
import { Hello } from "/dtos.mjs"

export default {
   template:/*html*/`&lt;div class="flex flex-wrap justify-center"&gt;
       &lt;TextInput v-model="name" @@keyup="update" /&gt;
       &lt;div class="ml-3 mt-2 text-lg"&gt;{{ result }}&lt;/div&gt;
   &lt;/div&gt;`,
   props:['value'],
   setup(props) {
       let name = ref(props.value)
       let result = ref('')
       let client = useClient()

       async function update() {
           let api = await client.api(new Hello({ name }))
           if (api.succeeded) {
               result.value = api.response.result
           }
       }
       update()

       return { name, update, result }
   }
}
</code></pre>

<b>dtos.ts</b>
<pre><code class="language-swift">export class HelloResponse
{
  public result: string;

  public constructor(init?: Partial&lt;HelloResponse&gt;) { 
      (Object as any).assign(this, init); 
  }
}

export class Hello implements IReturn&lt;HelloResponse&gt;
{
  public name: string;

  public constructor(init?: Partial&lt;Hello&gt;) { 
      (Object as any).assign(this, init); 
  }
  public createResponse() { return new HelloResponse(); }
  public getTypeName() { return 'Hello'; }
}
</code></pre>
            
        </div>
    </div>
</div>


<div class="relative isolate overflow-hidden bg-white px-6 py-12 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Native Clients</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    As well as supporting the use of cross platform frameworks like Xamarin, ServiceStack supports building native client apps through the array of service client libraries and tooling.
                </p>
                <p class="text-left clearfix">
                    This means you'll have the most flexibility when it comes to building your client applications when integrating with a ServiceStack backend. You can use <code>Swift</code> for iOS, <code>Java</code> or <code>Kotlin</code> for Android and get the most out of platform you are targeting.
                </p>
                <p>
                    The DTOs are live generated from a running ServiceStack server and can be viewed via the URL <code>/types/{Name}</code>. Test this live using one of our hosted demo applications below.
                </p>
                <ul>
                    <li class="list-inside list-disc"><a href="https://web.web-templates.io/types/java">Java</a></li>
                    <li class="list-inside list-disc"><a href="https://web.web-templates.io/types/kotlin">Kotlin</a></li>
                    <li class="list-inside list-disc"><a href="https://web.web-templates.io/types/swift">Swift</a></li>
                    <li class="list-inside list-disc"><a href="https://web.web-templates.io/types/dart">Dart</a></li>
                </ul>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://docs.servicestack.net/java-add-servicestack-reference"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">

<pre><code class="language-csharp">
    public object Any(Hello request)
    {
        return new HelloResponse {
            Result = $"Hello, {request.Name}!" 
        };
    }
}

[Route("/hello")]
[Route("/hello/{Name}")]
public class Hello : IReturn&lt;HelloResponse&gt;
{
    public string Name { get; set; }
}

public class HelloResponse
{
    public string Result { get; set; }
}
</code></pre>

<b>dtos.kt</b>
<pre><code class="language-kotlin">open class Hello : IReturn&lt;HelloResponse&gt;
{
    var name:String? = null
    companion object { 
        private val responseType = 
            HelloResponse::class.java 
    }
    
    override fun getResponseType(): Any? = 
        Hello.responseType
}

open class HelloResponse
{
    var result:String? = null
}
</code></pre>

<b>dtos.swift</b>
<pre><code class="language-swift">public class Hello : IReturn, Codable
{
    public typealias Return = 
        HelloResponse

    public var name:String?

    required public init(){}
}

public class HelloResponse : Codable
{
    public var result:String?

    required public init(){}
}
</code></pre>
            
        </div>
    </div>
</div>


<div class="relative isolate overflow-hidden bg-white px-6 py-24 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Cross platform tooling</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    The ability to generate DTOs from your ServiceStack server can be done with a simple, cross-platform CLI as well as with many populate IDEs via direct integration.
                </p>
                <p class="text-left clearfix">
                    Adding integration only needs the base URL of the ServiceStack server, and a specified language. For example, if you were working on a TypeScript React application and wanted to integrate with a ServiceStack service, you could use the command.
                    <pre>x typescript https://web.web-template.io</pre>
                </p>
                <p class="text-left clearfix">
                    This would generate the server DTOs in TypeScript, allowing you to easily communicate with the server using <code>@@servicestack/client</code> library. The same workflow works for all supported languages!
                </p>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://docs.servicestack.net/add-servicestack-reference#installation"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">
            <img src="/img/start/add-ss-ref.png" alt="Add ServiceStack Reference">
        </div>
    </div>
</div>


<div class="relative isolate overflow-hidden bg-white px-6 py-24 lg:overflow-visible lg:px-0">
    <div class="lg:col-span-2 lg:col-start-1 lg:row-start-2 lg:mx-auto lg:grid lg:w-full lg:max-w-7xl lg:grid-cols-2 lg:gap-x-8 lg:px-8">
        <div class="lg:pr-4">
            <div class="lg:max-w-lg mb-4">
                <h1 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Instant Client Apps</h1>
            </div>
            <div class="max-w-xl leading-7 text-gray-700 lg:max-w-lg prose lg:prose-lg">
                <p class="text-left clearfix">
                    The typed end to end clients also means we can generate complete working client application from a ServiceStack server. This enabled ServiceStack to offer a free web hosted tool to do just that and allow anyone to generate native client apps instantly with just a base URL.
                </p>
                <p class="text-left clearfix">
                    Check out this video to see how this can be used to speed up client application development using Dart and Flutter!
                </p>
            </div>
            <div class="buttons text-center sm:text-left my-8">
                <a href="https://apps.servicestack.net/"
                   class="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white hover:text-white shadow-xl px-5 py-2 inline-block text-blue-100 rounded">
                    Learn more
                </a>
            </div>
        </div>
        <div class="pt-4">
            <lite-youtube class="shadow-sm border" width="560" height="315" videoid="GTnuMhvUayg" style="margin-bottom:3px;background-image: url('https://img.youtube.com/vi/GTnuMhvUayg/maxresdefault.jpg')"></lite-youtube>
        </div>
    </div>
</div>


<div class="my-20 flex justify-center">
    <div class="flex items-center">
        <a href="overview/fundamentals">
            <div class="rounded-md py-2 pl-2 pr-6 shadow-lg bg-blue-500 text-white hover:bg-blue-600 text-2xl font-normal flex items-center">
                <svg class="w-10 h-10" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="m14 18l-6-6l6-6l1.4 1.4l-4.6 4.6l4.6 4.6Z"/></svg>
                Fundamentals
            </div>
        </a>
        <span class="text-2xl ml-4 text-gray-400">Previous</span>
    </div>
</div>

@await Html.PartialAsync("DocsFooter")
