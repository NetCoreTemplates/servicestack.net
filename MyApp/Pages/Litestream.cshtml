@page "/litestream"
@attribute [RenderStatic]

@{
    ViewData["Title"] = "Litestream Apps";
    ViewData["Brand"] = "Litestream Apps";
}
@await Html.PartialAsync("VideoHero", new Shared.VideoHero {
    BackgroundUrl = "/img/backgrounds/bg-header6.jpg",
    Heading = "Safely run DB Apps on a single server at low cost",
    SubHeading = "Simple & Fast! Litestream reliably runs most Apps, fast on a single server, with continuous backups to cheap managed storage",
    ActionUrl = "https://litestream.io",
    ActionText = "What is Litestream?",
    YoutubeId = "WXRwT7ayc1Y",
})

@await Html.PartialAsync("PrimaryNav", "")

<link rel="stylesheet" href="css/lite-yt-embed.css">
<section class="text-center w-full py-12 sm:py-24">
    <div class="mx-auto max-w-7xl">
        <div class="mb-16">
            <h2 class="text-4xl tracking-tight font-extrabold text-gray-900 dark:text-gray-50 sm:text-5xl md:text-6xl">Reduce Complexity &amp; Save Costs</h2>
            <div class="my-3 max-w-lg mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-4xl">
                Litestream performs continuous, per second backups to AWS S3, Azure Blob Storage &amp; SFTP
                providing resilient, cost effective point-in-time restore functionality
                Avoid expensive managed RDBMS servers, reduce complexity by replicating to cheap managed storage with
                <a class="font-semibold hover:underline" href="https://aws.amazon.com/s3/storage-classes/">11 9's durability</a>
            </div>
        </div>
        <img src="/img/pages/litestream/litestream-costs.svg">
    </div>
</section>

<section class="bg-gray-50 text-center w-full py-12 sm:py-24">
    <div class="mx-auto max-w-7xl">
        <div class="mb-16">
            <h2 class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">Savings at Scale</h2>
            <div class="my-3 max-w-lg mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-4xl">
                SQLite directly benefits from improving hardware's faster CPUs and SSDs with superior locality to comfortably handle most App's needs. 
            </div>
        </div>
        <img src="/img/pages/litestream/litestream-costs-perf.svg">
    </div>
</section>

<section class="text-center w-full py-12 sm:py-24">
    <div class="mx-auto max-w-7xl">
        <div class="mb-16">
            <h2 class="text-4xl tracking-tight font-extrabold text-gray-900 dark:text-gray-50 sm:text-5xl md:text-6xl">Effortless Migrations</h2>
            <div class="my-3 max-w-lg mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-4xl">
                No Lock-in. Migrate off whenever you want. <br>
                Using SQLite with <a class="font-semibold hover:underline" href="https://docs.servicestack.net/ormlite/">OrmLite's</a> fast, typed APIs
                lets you easily migrate to any of its 
                <a href="https://docs.servicestack.net/ormlite/installation">supported RDBMS</a> with just configuration, no other code changes required.
            </div>
        </div>
        <div class="flex justify-center pb-8 my-8 bg-white">
            <img src="/img/pages/litestream/litestream-migrate.svg" class="max-w-screen-md">
        </div>
    </div>
</section>

<section class="bg-gray-50 text-center w-full py-12 sm:py-24">
    <div class="mx-auto max-w-7xl">
        <div class="mb-16">
            <h2 class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl">How it works</h2>
            <div class="my-3 max-w-lg mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-4xl">
                Litestream is run as a 
                <a class="font-semibold hover:underline" href="https://litestream.io/guides/docker/">sidecar Docker container</a>,
                activated on each deployment to handle restoring &amp; replicating changes from its configured storage
            </div>
        </div>
        <img src="/img/pages/litestream/litestream-how-it-works.svg">
    </div>
</section>

<section class="text-center w-full py-12 sm:py-24">
    <div class="mx-auto max-w-7xl">
        <div class="mb-16">
            <h2 class="text-4xl tracking-tight font-extrabold text-gray-900 dark:text-gray-50 sm:text-5xl md:text-6xl">Create Litestream Jamstack Apps</h2>
            <div class="my-3 max-w-lg mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-4xl">
                To make working with Litestream easy, we've created GitHub Action Docker Compose configurations for each of Litestream's popular Storage options
                that you can 
                <a class="font-semibold hover:underline" href="https://docs.servicestack.net/mix-tool">mix</a> &amp; match with any modern C#
                <a class="font-semibold hover:underline" href="https://jamstacks.net">jamstacks.net</a> Project Template below:
            </div>
        </div>

        <div id="projects"></div>
    </div>
</section>


@await Html.PartialAsync("PricingLinks")

@await Html.PartialAsync("Testimonials")

@await Html.PartialAsync("BrandCustomers")

<script type="module">
import { ref, computed, watch, onMounted } from "vue"
import { queryString, appendQueryString } from "@@servicestack/client"
import { mount } from "app.mjs"

const App = {
    template:`<div>
      <fieldset id="litestream-options" class="my-10">
          <legend class="text-gray-700">
              <h3 class="mb-3 text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">Select preferred Litestream storage option</h3>
          </legend>
          <div class="mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-3 sm:gap-x-4">
              <!--
              Checked: "border-transparent", Not Checked: "border-gray-300"
              Active: "border-indigo-500 ring-2 ring-indigo-500"
              -->
              <label class="relative bg-white border rounded-lg shadow-sm p-4 flex cursor-pointer focus:outline-none">
                  <input type="radio" v-model="storage" name="storage" value="aws" class="sr-only" aria-labelledby="storage-0-label" aria-describedby="storage-0-description-0 storage-0-description-1">
                  <span class="flex-1 flex">
                      <span class="w-full flex flex-col items-center">
                          <span>
                              <img src="/img/pages/litestream/aws_square.svg" alt="AWS S3" class="w-52">
                          </span>
                          <span id="storage-0-label" class="block text-2xl font-medium text-gray-900">
                              S3 Simple Storage Service
                          </span>
                      </span>
                  </span>
                  <!--
                  Not Checked: "invisible"
                  Heroicon name: solid/check-circle
                  -->
                  <svg :class="['h-5 w-5 text-indigo-600', storage != 'aws' ? 'invisible' : '']" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                  </svg>
                  <!--
                  Active: "border", Not Active: "border-2"
                  Checked: "border-indigo-500", Not Checked: "border-transparent"
                  -->
                  <span :class="['absolute -inset-px rounded-lg border-2 pointer-events-none', storage == 'aws' ? 'border-indigo-500' : 'border-transparent']" aria-hidden="true"></span>
              </label>
    
              <!--
              Checked: "border-transparent", Not Checked: "border-gray-300"
              Active: "border-indigo-500 ring-2 ring-indigo-500"
              -->
              <label class="relative bg-white border rounded-lg shadow-sm p-4 flex cursor-pointer focus:outline-none">
                  <input type="radio" v-model="storage" name="storage" value="azure" class="sr-only" aria-labelledby="storage-1-label" aria-describedby="storage-1-description-0 storage-1-description-1">
                  <span class="flex-1 flex">
                      <span class="w-full flex flex-col items-center">
                          <span>
                              <img src="/img/pages/litestream/azure_square.svg" alt="Azure Blob Storage" class="w-52">
                          </span>
                          <span id="storage-1-label" class="block text-2xl font-medium text-gray-900">
                              Azure Blob Storage
                          </span>
                      </span>
                  </span>
                  <!--
                  Not Checked: "invisible"
                  Heroicon name: solid/check-circle
                  -->
                  <svg :class="['h-5 w-5 text-indigo-600', storage != 'azure' ? 'invisible' : '']" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                  </svg>
                  <!--
                  Active: "border", Not Active: "border-2"
                  Checked: "border-indigo-500", Not Checked: "border-transparent"
                  -->
                  <span :class="['absolute -inset-px rounded-lg border-2 pointer-events-none', storage == 'azure' ? 'border-indigo-500' : 'border-transparent']" aria-hidden="true"></span>
              </label>
    
              <!--
              Checked: "border-transparent", Not Checked: "border-gray-300"
              Active: "border-indigo-500 ring-2 ring-indigo-500"
              -->
              <label class="relative bg-white border rounded-lg shadow-sm p-4 flex cursor-pointer focus:outline-none">
                  <input type="radio" v-model="storage" name="storage" value="sftp" class="sr-only" aria-labelledby="storage-2-label" aria-describedby="storage-2-description-0 storage-2-description-1">
                  <span class="flex-1 flex">
                      <span class="w-full flex flex-col items-center">
                          <span>
                              <img src="/img/pages/litestream/sftp.png" alt="SFTP" class="w-52">
                          </span>
                          <span id="storage-2-label" class="block text-2xl font-medium text-gray-900">
                              SSH File Transfer Protocol
                          </span>
                      </span>
                  </span>
                  <!--
                  Not Checked: "invisible"
                  Heroicon name: solid/check-circle
                  -->
                  <svg :class="['h-5 w-5 text-indigo-600', storage != 'sftp' ? 'invisible' : '']" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                  </svg>
                  <!--
                  Active: "border", Not Active: "border-2"
                  Checked: "border-indigo-500", Not Checked: "border-transparent"
                  -->
                  <span :class="['absolute -inset-px rounded-lg border-2 pointer-events-none', storage == 'sftp' ? 'border-indigo-500' : 'border-transparent']" aria-hidden="true"></span>
              </label>
          </div>
      </fieldset>
    
      <div class="">
          <h3 class="mt-12 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl">Create new Litestream Jamstack App</h3>
          <div class="mx-auto max-w-3xl mt-6 text-xl leading-8">
              Each project template is pre-configured with the necessary GitHub Actions to activate Litestream replication services on each Docker Compose deployment:
          </div>
      </div>
    
    <section class="w-full flex flex-col justify-center text-center">
        <div id="empty" class="mt-4 mb-2">
            <div class="mt-4 mb-2">
                <div class="flex justify-center mb-8 pb-8">
                    <div class="w-70">
                        <input v-model="name" type="text" placeholder="Project Name" autocorrect="off" spellcheck="false" v-on:keypress="isAlphaNumeric"
                               class="mt-1 text-lg block w-full px-3 py-2 bg-white dark:bg-black border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500">
                    </div>
                </div>
            </div>
            <div id="ssg" class="mt-4 mb-2">
                <h3 class="text-gray-400 text-xl mb-2">SSG Templates</h3>
                <div class="flex flex-wrap justify-center">
                    <div>
                        <ProjectTemplate :name="name" repo="NetCoreTemplates/nextjs" :mix="tagsFor('nextjs')" :tags="['autoquery','auth']">
                            <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Next.js</div>
                            <template #icon>
                                <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15"><path fill="currentColor" fill-rule="evenodd" d="M0 7.5a7.5 7.5 0 1 1 11.697 6.216L4.907 4.21A.5.5 0 0 0 4 4.5V12h1V6.06l5.83 8.162A7.5 7.5 0 0 1 0 7.5ZM10 10V4h1v6h-1Z" clip-rule="evenodd"/></svg>
                            </template>
                        </ProjectTemplate>
                    </div>
                    <div>
                        <ProjectTemplate :name="name" repo="NetCoreTemplates/vue-ssg" :mix="tagsFor('vue-ssg')" :tags="['autoquery','auth']">
                            <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Vue SSG</div>
                            <template #icon>
                                <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M2 3h3.5L12 15l6.5-12H22L12 21L2 3m4.5 0h3L12 7.58L14.5 3h3L12 13.08L6.5 3Z"/></svg>
                            </template>
                        </ProjectTemplate>
                    </div>
                  </div>
              </div>
          </div>
    </section>
    
    <section class="w-full flex flex-col justify-center text-center">
        <div id="spa" class="mt-4 mb-2">
            <h3 class="text-gray-400 text-xl mb-2">SPA Templates</h3>
            <div class="flex flex-wrap justify-center">
                <div>
                    <ProjectTemplate :name="name" repo="NetCoreTemplates/blazor-tailwind" :mix="tagsFor('blazor-tailwind')" :tags="['autoquery','auth']">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor WASM</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.31.74 1.91 1.35c.98 1 2.09 2.15 4.59 2.15c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C15.61 7.15 14.5 6 12 6m-5 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.3.74 1.91 1.35C8.39 16.85 9.5 18 12 18c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C10.61 13.15 9.5 12 7 12Z"/></svg>
                        </template>
                    </ProjectTemplate>
                </div>
                <div>
                    <ProjectTemplate :name="name" repo="NetCoreTemplates/vue-vite" :mix="tagsFor('vue-vite')" :tags="['autoquery','auth']">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Vue Vite</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M2 3h3.5L12 15l6.5-12H22L12 21L2 3m4.5 0h3L12 7.58L14.5 3h3L12 13.08L6.5 3Z"/></svg>
                        </template>
                    </ProjectTemplate>
                </div>
                <div>
                    <ProjectTemplate :name="name" repo="NetCoreTemplates/blazor-server" :mix="tagsFor('blazor-server')" :tags="['autoquery','auth']">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor Server</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.31.74 1.91 1.35c.98 1 2.09 2.15 4.59 2.15c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C15.61 7.15 14.5 6 12 6m-5 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.3.74 1.91 1.35C8.39 16.85 9.5 18 12 18c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C10.61 13.15 9.5 12 7 12Z"/></svg>
                        </template>
                    </ProjectTemplate>
                </div>
            </div>
        </div>
    </section>   
    
    <section class="w-full flex flex-col justify-center text-center">
        <div id="spa" class="mt-4 mb-2">
          <h3 class="text-gray-400 text-xl mb-2">SSR Templates</h3>
          <div class="flex flex-wrap justify-center">
            <div>
                <ProjectTemplate :name="name" repo="NetCoreTemplates/blazor-server" :mix="tagsFor('web')" :tags="['autoquery','auth']">
                    <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Blazor Server</div>
                    <template #icon>
                        <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.31.74 1.91 1.35c.98 1 2.09 2.15 4.59 2.15c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C15.61 7.15 14.5 6 12 6m-5 6c-2.67 0-4.33 1.33-5 4c1-1.33 2.17-1.83 3.5-1.5c.76.19 1.3.74 1.91 1.35C8.39 16.85 9.5 18 12 18c2.67 0 4.33-1.33 5-4c-1 1.33-2.17 1.83-3.5 1.5c-.76-.19-1.3-.74-1.91-1.35C10.61 13.15 9.5 12 7 12Z"/></svg>
                    </template>
                </ProjectTemplate>
            </div>
          </div>
        </div>
    </section>   
    
      <section class="w-full flex flex-col justify-center text-center">
          <div id="spa" class="mt-4 mb-2">
              <div class="mt-8">
                  <h3 class="mb-3 text-2xl font-bold tracking-tight text-gray-900 dark:text-gray-50">Create empty Litestream Web App</h3>
                  <div class="mb-8 text-lg text-gray-500 leading-8">
                      For any other project, you can start with the empty App template
                  </div>
              </div>
          
              <div class="flex flex-wrap justify-center">
                <div>
                    <ProjectTemplate :name="name" repo="NetCoreTemplates/web" :mix="tagsFor('web')">
                        <div class="mb-3 text-xl font-medium text-gray-700 dark:text-gray-200">Web</div>
                        <template #icon>
                            <svg class="w-12 h-12 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M10 6c1.544 1.76 2.276 4.15 2.217 6.61c3.968 1.67 9.924 6.12 11.181 12.39H28C26.051 14.31 14.918 6.77 10 6zm-2 7c4.67 4.913.81 11.582-4 12h18.97C21.5 18.289 11.95 13.533 8 13z"></path></svg>
                        </template>
                    </ProjectTemplate>
                </div>
              </div>
          </div>
      </section>               
    </div>`,
    setup() {
        const name = ref('')
        const storage = ref()

        const defaultValue = location.hash.indexOf('azure') >= 0
                ? 'azure'
                : location.hash.indexOf('sftp') >= 0
                    ? 'sftp'
                    : 'aws'            
        
        let mixPrefixes = {
            "web":             "litestream",
            "nextjs":          "jamstack-litestream",
            "vue-ssg":         "jamstack-litestream",
            "vue-vite":        "jamstack-litestream",
            "blazor-wasm":     "blazor-litestream",
            "blazor-tailwind": "blazor-litestream",
            "blazor-server":   "blazor-litestream",
        }
        
        function tagsFor(template) {
            const prefix = mixPrefixes[template]
            return [`${prefix}-${storage.value||defaultValue}`]
        }
        
        function isAlphaNumeric(e) {
            const c = e.charCode;
            if (c >= 65 && c <= 90 || c >= 97 && c <= 122 || c >= 48 && c <= 57 || c === 95) //A-Za-z0-9_
                return;
            e.preventDefault()
        }
        
        function getMix() {
            return 'x-litestream-' + (storage.value || defaultValue)
        }
        function templateUrlFilter(url) {        
            let tplUrl = url.split('?')[0]
            let tpl = tplUrl.substring(tplUrl.lastIndexOf('/') + 1)
            return url.replace('x-litestream', mixPrefixes[tpl])
        }
        
        watch([name, storage], () => {
            const args = { Name: name.value || undefined, Mix: 'x-litestream-' + (storage.value || defaultValue) }
            const url = appendQueryString('', args)
            location.href = '../litestream#' + url.substring(1)
        })
        
        
        onMounted(() => {
            storage.value = defaultValue
        })
        
        return { name, storage, isAlphaNumeric, tagsFor }
    }
}

mount('#projects', App)
</script>

<script>
let DYNAMIC_URL = "{{site.dynamic_url}}"

let defaultValue = location.hash.indexOf('azure') >= 0
        ? 'azure'
        : location.hash.indexOf('sftp') >= 0
            ? 'sftp'
            : 'aws'

let anchor = location.hash && location.hash.indexOf('=') <= 0 && document.querySelector(location.hash)
if (!anchor && location.hash) anchor = document.querySelector('#create')
</script>


<!--  script>
updateTemplates()
if (anchor) {
    anchor.scrollIntoView()
}

let inputs = $('#litestream-options input[type=radio]')

// overrides getMix + templateUrlFilter in start.js
function getMix() {
    let chk = $('#litestream-options input:checked')[0]
    return 'x-litestream-' + (chk && chk.value) || defaultValue
}
function templateUrlFilter(url) {
    let mixPrefixes = {
        "web":             "litestream",
        "nextjs":          "jamstack-litestream",
        "vue-ssg":         "jamstack-litestream",
        "vue-vite":        "jamstack-litestream",
        "blazor-wasm":     "blazor-litestream",
        "blazor-tailwind": "blazor-litestream",
        "blazor-server":   "blazor-litestream",
    }

    let tplUrl = url.split('?')[0]
    let tpl = tplUrl.substring(tplUrl.lastIndexOf('/') + 1)
    return url.replace('x-litestream', mixPrefixes[tpl])
}

function updateStorage(e) {
    //let input = e.target
    inputs.each((i,input) => {
        let label = $(input.parentElement)
        let svg = label.find('svg')
        let border = label.find('.-inset-px')
        
        let isChecked = input.checked
        let isActive = label === document.activeElement
        if (isChecked) {
            label.addClass('border-transparent').removeClass('border-gray-300')
            border.addClass('border-indigo-500').removeClass('border-transparent')
            svg.attr('class', svg.attr('class').replace(/ invisible/g,''))
        } else {
            label.addClass('border-gray-300').removeClass('border-transparent')
            border.addClass('border-transparent').removeClass('border-indigo-500')
            svg.attr('class', svg.attr('class') + ' invisible')
        }
        if (isActive) {
            label.addClass('border-indigo-500 ring-2 ring-indigo-500')
            border.addClass('border').removeClass('border-2')
        } else {
            label.removeClass('border-indigo-500 ring-2 ring-indigo-500')
            border.addClass('border-2').removeClass('border')
        }
    })
    updateTemplates()
}

$(`#litestream-options input[value=${defaultValue}]`).attr('checked', true)
$('#litestream-options input[type=radio]').on('change', updateStorage)
updateStorage()
<--script-->
